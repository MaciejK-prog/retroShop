//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.


global class AutocreatedRegHandler1662634123186 implements Auth.RegistrationHandler{

    
		
		private static final String DEFAULT_ACCOUNTNAME = 'Customer Community User';
		private static final String EXTERNAL_USER_PROFILE = 'Customer Community User';
		private static final String INTERNAL_USER_PROFILE = 'Customer Community User';  
		private static final Id PERSON_ACCOUNT_RECORDTYPE = schema.Account.SobjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('PersonAccount').getRecordTypeId();
		private static final String TZSID = [SELECT timezonesidkey from User where profile.name = 'System Administrator' LIMIT 1].timezonesidkey;
		
	/**
	 * Let anyone register as long as the required fields are supplied
	 * 
	 * We require email, lastName, firstName
	 * 
	 * @data - the user's info from the Auth Provider
	 **/ 
	global boolean canCreateUser(Auth.UserData data) {

		Boolean retVal = (data != null 
				&& data.email != null
				&& data.lastName != null
				&& data.firstName != null);
		
		
		return retVal;
	}
	
	/**
	 * Create the User - A required method to implement the Handler Interface
	 * 
	 * @param portalId  - Id of the Community
	 * @param data - Auth Provider user data describing the User to create
	 * 
	 * @return User that has been initialized
	**/ 
	global User createUser(Id portalId, Auth.UserData data){
		if(!canCreateUser(data)) {
			// Returning null signals the auth framework we can't create the user
			return null;
		}
		
		// Is this a Community Context?
		if(data.attributeMap.containsKey('sfdc_networkid')) {
			Id contactId;
	
			// Checking to see if the email address is already used by another Contact
			// If so, use that contact and user
			List<Account> existingAccounts = [select id, PersonContactId, PersonEmail from Account where PersonEmail =: data.email AND RecordTypeId =: PERSON_ACCOUNT_RECORDTYPE];
			if (existingAccounts.size() > 0){
				// Use the first Contact with matching email

				Account existingAccount = existingAccounts[0];
				contactId = existingAccount.PersonContactId;
				List<User> existingUsers = [select id from User where ContactId =: contactId];

				if (existingUsers.size() == 1){

					// Use this User instead of creating a new one
					// The Registration Handler system will assoicate the Auth Provider
					// with this user
					return existingUsers[0];
				}
			} else {


				contactId = createPersonAccount(data);
           
			}
			

			// You'd likely use other logic to assign the Profile
			Profile p = [SELECT Id FROM profile WHERE name=:EXTERNAL_USER_PROFILE];
	
	
			// Keeping it modular, we initialize the user in another method
			User u = constructUser(data,p);
			u.contactId = contactId.to15();

		

			insert u; 

			return u;

		} else {
			//This is not a community, so we Assign an internal profile
			Profile p = [SELECT Id FROM profile WHERE name=:INTERNAL_USER_PROFILE];		
			// Keeping it modular, we initialize the user in another method
			User u = constructUser(data,p);

			insert u;

			return u;
		}
	}
	
	/**
	 * Update the user
	 * @param portalId  - Id of the Community
	 * @param data - Auth Provider user data describing the User to create
	 **/     
	global void updateUser(Id userId, Id portalId, Auth.UserData data){	
		User u = new User(id=userId);
		u.email = data.email;
		u.lastName = data.lastName;
		u.firstName = data.firstName;
		update(u);
	}
		/**
		 * Create a Contact
		 * 
		 * @param data 
		 **/
		private Id createPersonAccount(Auth.UserData data){
			Account account = new Account();
			account.LastName = data.lastName;
			account.FirstName = data.firstName;
			account.PersonEmail = data.email;
			account.RecordTypeId = PERSON_ACCOUNT_RECORDTYPE;
			


			insert account;
	
			return [SELECT PersonContactId FROM Account WHERE Id = :account.Id LIMIT 1]?.PersonContactId;
		}
	
		
		/**
		 * Create and initialize the User but don't save it yet
		 * 
		 * @param data - the provided User context from FaceBook
		 * @param p - the Profile we are going to assign to this user
		 * 
		 * @return User that has been initialized but not Saved
		 **/ 
		private User constructUser(Auth.UserData data, Profile p) {
			User u = new User();
			u.username = data.email + '.retro-dev';
			u.email = data.email;
			u.lastName = data.lastName;
			u.firstName = data.firstName;
			String alias = data.firstName + data.lastName;
			
			//Alias must be 8 characters or less
			if(alias.length() > 8) {
				alias = alias.substring(0, 8);
			}
			u.alias = alias;
			u.languagelocalekey = UserInfo.getLanguage();
			u.localesidkey = UserInfo.getLocale();
			u.emailEncodingKey = 'UTF-8';
			u.timeZoneSidKey = TZSID;
			u.profileId = p.Id;
			return u;
		}        
	}